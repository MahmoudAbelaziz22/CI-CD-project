version: 2.1

commands:
  destroy-environment:
    parameters:
      id:
        type: string
    steps:
      - run:
          name: Destroy environment
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-<< parameters.id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.id >>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.id >>

  revert-migrations:
    parameters:
      id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          working_directory: ./backend
          command: |
            VALUE=$(curl -k https://kvdb.io/EFCdXPH3VKjv4D76gUiDSd/migration_<< parameters.id >>  -d '1')
            echo $VALUE
            if [[ "$VALUE" == "success" ]]
            then
              npm run migrations:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
             cd frontend
             npm install
             npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
             cd frontend
             npm install
             npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build 

  scan-frontend:
    docker:
     - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  scan-backend:
    docker:
     - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build 

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
             
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "[web]" > .circleci/ansible/inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
             
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

      - destroy-environment:
            id: ${CIRCLE_WORKFLOW_ID:0:7}  
  
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["8b:a5:fc:6a:75:f1:89:a2:16:e9:47:62:45:5a:d3:77"] 
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
             apk add --update ansible 
      - run:
          name: Configure server
          command: |
             cd .circleci/ansible
             cat inventory.txt
             ansible-playbook -i inventory.txt configure-server.yml 
      
      - destroy-environment:
            id: ${CIRCLE_WORKFLOW_ID:0:7} 

  run-migrations:
    docker:
     - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
              cd backend
              npm install
              npm run migrations > migrations_dump.txt 
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
            curl -k https://kvdb.io/EFCdXPH3VKjv4D76gUiDSd/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi

      - destroy-environment:
            id: ${CIRCLE_WORKFLOW_ID:0:7} 

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install python
          command: | 
              yum install python37 -y 
      - run:
          name: Install ansible
          command: |  
            curl https://bootstrap.pypa.io/pip/2.7/get-pip.py -o get-pip.py
            python get-pip.py --user
            python -m pip install --user ansible
      - run:
          name: Install node and npm
          command: |
            curl -sL https://rpm.nodesource.com/setup_10.x |  bash -
            yum install nodejs -y
            node --version
            npm --version
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      
      - destroy-environment:
            id: ${CIRCLE_WORKFLOW_ID:0:7} 

      - revert-migrations:
            id: ${CIRCLE_WORKFLOW_ID:0:7}    
  
  deploy-backend:
    docker:
      - image: cimg/base:2022.04
    steps:
      - checkout
      - install_awscli
      - install_ansible
      - install_nodejs
      - add_ssh_keys:
          fingerprints: ["8b:a5:fc:6a:75:f1:89:a2:16:e9:47:62:45:5a:d3:77"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: package backend
          command: |
            cd backend
            npm i
            npm run build
            cd ../
            tar -czf artifact.tar.gz backend
            cp artifact.tar.gz .circleci/ansible/roles/deploy/tasks/files
      - run:
          name: Deploy backend
          command: |
            export TYPEORM_MIGRATIONS_DIR=.migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*.ts
            cd .circleci/ansible
            ansible-playbook -i inventory.txt deploy-backend.yml

      # - destroy-environment:
      #     id: ${CIRCLE_WORKFLOW_ID:0:7} 

      # - revert-migrations:
      #       id: ${CIRCLE_WORKFLOW_ID:0:7} 

  smoke-test:
    docker:
      - image: alpine:3.14 
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk update
            apk upgrade
            apk add curl
            apk add --update nodejs npm
            apk add --no-cache aws-cli
            aws --version
      - run:
          name: Get backend url
          command: |
            
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
         
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
            return 0
            else
            return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
            return 1
            else
            return 1
            fi

      # - destroy-environment:
      #     id: ${CIRCLE_WORKFLOW_ID:0:7} 

      # - revert-migrations:
      #       id: ${CIRCLE_WORKFLOW_ID:0:7} 


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]